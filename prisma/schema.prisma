// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  loginId     String   @unique @map("login_id") @db.VarChar(20) // ID(영문소문자, 숫자)
  name        String   @db.VarChar(50) // 이름(한글, 영문대소문자)
  nickname    String   @unique @db.VarChar(20) // 닉네임(영문소문자, 중복불허)
  password    String   @db.VarChar(255) // 비밀번호(영문소문자, 숫자, 특수문자)
  profileImageUrl String? @map("profile_image_url") @db.VarChar(500) // 프로필 이미지 URL
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  posts Post[]
  likes Like[]
  comments Comment[]
  retweets Retweet[]
  refreshTokens RefreshToken[]

  @@map("users")
}

model RefreshToken {
  id          Int      @id @default(autoincrement())
  userId      Int      @map("user_id")
  token       String   @unique @db.VarChar(500)
  deviceId    String?  @map("device_id") @db.VarChar(100) // 기기 식별용
  userAgent   String?  @map("user_agent") @db.Text // 브라우저/앱 정보
  ipAddress   String?  @map("ip_address") @db.VarChar(45) // IPv6 지원
  expiresAt   DateTime @map("expires_at")
  createdAt   DateTime @default(now()) @map("created_at")
  lastUsedAt  DateTime @default(now()) @map("last_used_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("refresh_tokens")
}

model Post {
  id            Int      @id @default(autoincrement())
  userId        Int      @map("user_id")
  categoryId    Int      @map("category_id")
  content       String   @db.Text
  likesCount    Int      @default(0) @map("likes_count")
  retweetsCount Int      @default(0) @map("retweets_count")
  commentsCount Int      @default(0) @map("comments_count")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  category Category    @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  images   PostImage[]
  likes    Like[]
  comments Comment[]
  retweets Retweet[]

  @@index([userId])
  @@index([categoryId])
  @@index([createdAt])
  @@map("posts")
}

model Like {
  id     Int @id @default(autoincrement())
  userId Int @map("user_id")
  postId Int @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
  @@map("likes")
}

model Comment {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  postId    Int      @map("post_id")
  content   String   @db.Text
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@index([userId])
  @@map("comments")
}


model Category {
  id   Int    @id @default(autoincrement())
  name String @unique @db.VarChar(50)

  posts Post[]

  @@map("categories")
}

model PostImage {
  id     Int    @id @default(autoincrement())
  postId Int    @map("post_id")
  url    String @db.VarChar(500)
  order  Int    // 이미지 순서 (1-4)

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@map("post_images")
}

model Retweet {
  id     Int      @id @default(autoincrement())
  userId Int      @map("user_id")
  postId Int      @map("post_id")
  createdAt DateTime @default(now()) @map("created_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId])
  @@index([postId])
  @@map("retweets")
}
